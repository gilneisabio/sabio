/**
 *
 *  @title{Javascript code}
 * 	Nexto internal web page
 * 
 *  @brief   Main javascript routines and support functions for Nexto internal web page
 *  @file    js/jscript.js
 *  @author  Marcelo dos Santos Rodrigues
 *           Tiago Dall'Agnol
 *		     Vijay Nikam
 * 		     Charles Leonhardt
 * 	@copyright	WAA
 *
 */

/* *************************************
 * PRIVATE GLOBAL VARIABLES DEFINITION *
 * *************************************/

var userLogged;
var languageXML;
var gLanguage	= "en";
var siFrameName = "contentIFrameId"; // Name of the main site iFrame
var objsToComplete 		= new Array();
var objsToChangeTitle 	= new Array();
var request 	= initXMLHttpClient();
var HttpRequest = initXMLHttpClient();
var enablePolling = false;
var tabLimit = 1; // dynamically adjusted by tabChange() function
var ignoreRequest = -1;
var RequestTimeout = -1;
var statusRequestI = -1;
var pollingTimeoutMS = 3000;
var getStatusTimeoutID = -1;
var checkOtherUserTimeout = -1;

/* ************************************
 * PRIVATE GLOBAL CONSTANT DEFINITION *
 * ************************************/

const moduleSize = 53;	// 53 is the size of a module
const enterKeyCode = 13;
const statusHttpOK = 200;
const centeringFill = 700;
const moduleNextoSize = 39;	// 39 is the size of a Nexto module
const stateOperationComplete = 4;

const hexColors = {
	Smalt:			"#00338F", // Altus Main Color
	Cardinal:		"#ae1227", // Beijer Main Color
	Chambray:		"#525d6e", // HighValue Main Color
	White:			"#FFFFFF",
	BrightGrey:		"#58595B",
	Mischka: 		"#afb0b2",
	GreyChateau:	"#9A9B9C",
}

const fakePath		= "C:\\fakepath\\";
const Vendor		= "Altus";
const enableVPN		= "y";
const enableFTP		= "";
const enableLora	= "";
const targetName	= "NX3035";
const enableSNMP	= "";
const enableNetConf	= "y";
const enableFirewall		= "y";
const enableUSBDevices		= "";
const configModbusHead		= "";
const enableRemoteSlave		= "";
const hideSystemOverview	= "";
const configProfinetHead	= "";
const EnableWatchVars	    = "";

/* *********************************
 * DEFINITION OF DEFAULT FUNCTIONS *
 * *********************************/

function onLoadFunc()
{
	var mainContainer;

	calculateContainerTop();
	createRefreshText();

	mainContainer = document.getElementById("idMainContainer");
	
	if(mainContainer != null) {
		mainContainer.style.display = "block";
	}
	
	showMenuTabs();
	
	if (userLogged) {
		showManagerTabs();
	}

	setTargetTitle()
	setBoldTextOnSelectedLanguage();
}

function showAneelLogo()
{
	var img;

	if(targetName == "GW700") {
		img = document.createElement("img");
		img.setAttribute("src", "../img/aneel_logo.png");

		document.getElementById("idAneelLogoDiv").appendChild(img);
		document.getElementById("idAneelLogoDiv").style.display = "block";
	}
}

function setTargetTitle()
{
	top.document.getElementById("idSerieTitle").textContent = targetName.slice(0, 2);
	top.document.getElementById("idNameTitle").textContent = targetName.slice(2);
}

function setBoldTextOnSelectedLanguage()
{
	if(gLanguage === "en") {
		top.document.getElementById("idLanguageENText").style.color = hexColors.BrightGrey;
		top.document.getElementById("idLanguagePTText").style.color = hexColors.GreyChateau;
	}
	else {
		top.document.getElementById("idLanguageENText").style.color = hexColors.GreyChateau;
		top.document.getElementById("idLanguagePTText").style.color = hexColors.BrightGrey;
	}
}

/* Hooks */
window.onresize = calculateContainerTop;
window.onload = onLoadFunc;

function showMenuTabs()
{
	var allTabs = 0;
	var i = 1;
	
	/* Count how many menu tabs the page have */
	while(document.getElementById("tabCell" + i.toString()) != null){
		allTabs = i;
		i++;
	}
	
	if(allTabs > 0){
		for(i = 1; i <= allTabs; i++){
			if(i == 2){
				if((hideSystemOverview == 'y') || (configProfinetHead == 'y')){
					top.document.getElementById("tabCell" + i.toString()).style.display = "none";
				}
				else{
					top.document.getElementById("tabCell" + i.toString()).style.display = "block";
				}
			}
		}
	}
	if (EnableWatchVars=="y"){
	checkVarTab(false,true);
	}
}

function showManagerTabs()
{
	var tableElements;
	var allElements;	
		
	tableElements = document.getElementById("idsubHeaderContainerTabs");
	if(tableElements != null){
		allElements = tableElements.getElementsByTagName("div");
		for(var i = 0; i < allElements.length; i++){
			allElements[i].style.display="none";
		}
	}
	else{		
		if(tableElements == null){

			tableElements = window.top.frames.contentIFrameName.document.getElementById('idMenuContainerManagerTabs');
		}
		
		if(tableElements != null){

			window.top.frames.contentIFrameName.document.getElementById('idMenuContainerManagerTabs').style.display = 'block';
			window.top.frames.contentIFrameName.document.getElementById('idsubHeaderContainerTabs').style.display = 'block';
			
			allElements = tableElements.getElementsByTagName("li");
			for(var i = 0; i < allElements.length; i++){
				if(allElements[i].id == "idListGeneralConfig"){
					allElements[i].style.display = 'block';
				}
				else if((enableNetConf == "y") && (allElements[i].id == "idListNetConf")){
					allElements[i].style.display = 'block';
				}
				else if((enableSNMP == "y") && (allElements[i].id == "idListSNMP")){
					allElements[i].style.display = 'block';
				}
				else if((enableRemoteSlave == "y") && (allElements[i].id == "idListRemote")){
					allElements[i].style.display = 'block';
				}
				else if((enableUSBDevices == "y") && (allElements[i].id == "idListUSBDevices")){
					allElements[i].style.display = 'block';
				}
				else if((enableFirewall == "y") && (allElements[i].id == "idListFirewall")){
					allElements[i].style.display = 'block';
				}
				else if((enableVPN == "y") && (allElements[i].id == "idListVPN")){
					allElements[i].style.display = 'block';
				}
				else if((enableFTP == "y") && (allElements[i].id == "idListFTP")){
					allElements[i].style.display = 'block';
				}
				else if((enableLora == "y") && (allElements[i].id == "idListLora")){
					allElements[i].style.display = 'block';
				}
			}
		}
		
		tableElements = window.top.frames.contentIFrameName.document.getElementById('idsubHeaderContainerTabs');

		if(tableElements != null){

			allElements = tableElements.getElementsByTagName("div");

			for(var i = 0; i < allElements.length; i++){

				allElements[i].style.display="none";
			}
		}
	}
}

function testConnection()
{
	HttpRequest.open('GET','test.xml?id='+randomId(), true);
	HttpRequest.onreadystatechange = testConnectionStateChanged;
	HttpRequest.send(null);
}

function testConnectionStateChanged()
{	
	/* If state is equal 4 (the operation is completed) */
	if (HttpRequest.readyState == stateOperationComplete) { 
		/* If the HTTP status is OK */
		if (HttpRequest.status == statusHttpOK) { 
		}
		/* If request status is different than 200 */ 
		else {  
		}
	}
}

function WatchVarRequestHandler()
{	
	var seq;
	var row;
	var init = false;
	var table;
	var cell1;
	var cell2;
	var cell3;
	var status;
	var new_value;
	var randomIdURL;
	var num_elements;
	
	if(ignoreRequest == 1){
		ignoreRequest = -1;
		return;
	}
	/* If state is equal 4 (the operation is completed) */
	if (HttpRequest.readyState == stateOperationComplete) {
		if(getStatusTimeoutID != -1) {
			clearTimeout(getStatusTimeoutID);
			getStatusTimeoutID = -1;
		}
		try{
			/* If the HTTP status is OK */
			if (HttpRequest.status == statusHttpOK) {
				status = HttpRequest.responseXML.getElementsByTagName('enableWatchVar')[0].firstChild.data;
				
				/* Set status mode */
				try{
					if (status == "Yes"){
						showhide('tabCell5', 'block');
					}
					else{
						showhide('tabCell5', 'none');
					}
					init = true;
				}catch(err){}
				
				/* Change values */
				if(!init){
					try{
						if(status == "Yes"){
							num_elements = HttpRequest.responseXML.getElementsByTagName('module').length;
							table = document.getElementById("idWatchVarsTable");
							while(table.rows.length > num_elements+1){
								table.deleteRow(-1);
							}
							
							while(table.rows.length < num_elements+1){
								row = table.insertRow(-1);
								cell1 = row.insertCell(0);
								cell2 = row.insertCell(1);
								cell3 = row.insertCell(2);
								
								if((table.rows.length - 2) % 2 == 0){
									row.className = "contentTableLinkLines";
								}
								else{
									row.className = "contentTableLinkLines2";
								}
								
								cell1.id = "idTableVarName"+(table.rows.length - 2).toString();
								cell1.className = "contentTable_cells_normal";
								cell2.id = "idTableVarValue"+(table.rows.length - 2).toString();
								cell2.className = "contentTable_cells_normal";
								cell3.id = "idTableVarUnit"+(table.rows.length - 2).toString();
								cell3.className = "contentTable_cells_normal";
							}
							
							for (var element in HttpRequest.responseXML.getElementsByTagName('module')){
								for (var i = 0; i < HttpRequest.responseXML.getElementsByTagName('module')[element].childElementCount; i++){
									if(HttpRequest.responseXML.getElementsByTagName('module')[element].childNodes[i].nodeName == "var_name"){
										new_value = HttpRequest.responseXML.getElementsByTagName('module')[element].childNodes[i].textContent;
										if(document.getElementById("idTableVarName"+element.toString()).innerHTML != new_value){
											document.getElementById("idTableVarName"+element.toString()).innerHTML = new_value;
										}
									}
									else if(HttpRequest.responseXML.getElementsByTagName('module')[element].childNodes[i].nodeName == "var_unit"){
										new_value = HttpRequest.responseXML.getElementsByTagName('module')[element].childNodes[i].textContent;
										if(document.getElementById("idTableVarUnit"+element.toString()).innerHTML != new_value){
											document.getElementById("idTableVarUnit"+element.toString()).innerHTML = new_value;
										}
									}
									else if(HttpRequest.responseXML.getElementsByTagName('module')[element].childNodes[i].nodeName == "var_value"){
										new_value = HttpRequest.responseXML.getElementsByTagName('module')[element].childNodes[i].textContent;
										if(document.getElementById("idTableVarValue"+element.toString()).innerHTML != new_value){
											document.getElementById("idTableVarValue"+element.toString()).innerHTML = new_value;
										}
									}
								}
							}
						}
						else{
							seq = randomId();
							randomIdURL;
	
							randomIdURL = "/?randomId=" + seq;
							window.top.location.href = randomIdURL;
							enablePolling = false;
							stopVarTabPolling();
						}
					}catch(err){}
				}
			}
		}catch(err){}
		
		if(enablePolling){
			startVarTabPolling();
		}
	}
}

function ajaxUpdateVarTabTimeout()
{
	HttpRequest.abort();
	polling_start();
}

function checkVarTab(enable, force)
{	
	if(force){
		enablePolling = enable;
	}
	
	HttpRequest.open('GET', 'NextoDiag.cgi?info=watch-vars&list=details&randomId='+randomId(), true);
	HttpRequest.onreadystatechange = WatchVarRequestHandler;
	
	statusRequestID =-1;

	if(getStatusTimeoutID == -1){
		getStatusTimeoutID = setTimeout(ajaxUpdateVarTabTimeout, pollingTimeoutMS);
	}
	
	HttpRequest.send(null);
}

function startVarTabPolling()
{
	if(statusRequestID == -1) {
		statusRequestID = window.setTimeout('checkVarTab(false, false)',1000);
	}

	ignoreRequest = -1;
}

function stopVarTabPolling() 
{
	if(getStatusTimeoutID != -1) {
		clearTimeout(getStatusTimeoutID);
		getStatusTimeoutID = -1;
	}

	if(statusRequestID != -1) {
		window.clearTimeout(statusRequestID);
		statusRequestID = -1;
	}
}

function getActiveSessionId(cookie_name)
{
	SessionId = readCookie(cookie_name);

	if(SessionId == null) {
		SessionId = 'no-session';
	}

	return SessionId;
}

function getPageAnswer(ListId, cgi_name)
{
	var mode;

	/* If state is equal 4 (the operation is completed) */
	if (HttpRequest.readyState == stateOperationComplete) {
		/* If the HTTP status is OK */
		if (HttpRequest.status == statusHttpOK) {
			try {
				mode = HttpRequest.responseXML.getElementsByTagName('mode')[0].firstChild.data;
								
				if (mode == "NotLoggedIn") {
					userLogged = false;
					eraseCookie("SessionId");
					showhide('idStatusLoginBox','none');
					switchTo('manager-login.html', "IFrameManager");
				}
				else if (mode == "LoginBadCredentials") {
					alert(getLangText('msgStatus' + mode));
				}
				else if (mode == "OtherLoggedIn") {
					userLogged = false;
					checkOtherUserTimeout = setTimeout(VerifyOtherLoggedUser, 1500);
					document.getElementById('idTxtStatusLogin').innerHTML = getLangText('msgStatus' + mode);
					showhide('idStatusLoginBox','block');
				}
				else if (mode == "LoginOk") {
					userLogged = true;
					top.document.getElementById("idLogoutDiv").style.display = "block";
					sessionStorage.setItem("UserLogged", 1);
					
					if (userLogged) {
						ChangeMenuListElements(ListId);
					}

					clearTimeout(checkOtherUserTimeout);
					if("NetConfOnManager" == readCookie("SelectedOnManager")) {
						switchTo('netconf.html', "IFrameManager");
					}
					else {
						switchTo(cgi_name, "IFrameManager");
					}
				}
				showLoadingWindow(false);
			}
			catch(e) {
				console.log(e);
				switchTo('manager-login.html', "IFrameManager");
			}
		}
		/* if request status is different than 200 */
		else { 
			switchTo('manager-login.html', "IFrameManager");
		}
	}
}

function ManagerLogin(user, pass)
{
	showLoadingWindow(true);
	
	/* TODO - eliminate bad chars: & = [space] */
	var userChecked = hex_md5('USR'+user);
	var passChecked = hex_md5('PWD'+pass);
	var sessionId = randomId();
	var answer_function;

	/* Get the current Tab */
	var SelectedOnManager = readCookie('SelectedOnManager');
	
	if(SelectedOnManager == null){
		createCookie('SelectedOnManager', 'GeneralConfigOnManager');
	}
	
	switch(SelectedOnManager)
	{
		case 'SNMPOnManager':
			/* Set informations to SNMP Login*/
			answer_function = SNMPAnswer;
			break;
		case 'RemoteOnManager':
			/* Set informations to Remote Login*/
			answer_function = RemoteAnswer;
			break;
		case 'USBDevicesOnManager':
			/* Set informations to USB Devices Login*/
			answer_function = USBDevicesAnswer;
			break;
		case 'FirewallOnManager':
			/* Set informations to Firewall Login*/
			answer_function = FirewallAnswer;
			break;
		case 'VPNOnManager':
			/* Set informations to VPN Login*/
			answer_function = VPNAnswer;
			break;
		case 'FTPOnManager':
			/* Set informations to FTP Login*/
			answer_function = FTPAnswer;
			break;
		case 'NetConfOnManager':
			/* Set informations to Network Configuration Login*/
			answer_function = NetConfAnswer;
			break;
		case 'LoraOnManager':
			/* Set informations to LoRa Config Login*/
			answer_function = LoraconfigAnswer;
			break;
		case 'GeneralConfigOnManager':
		default:
			/* Set informations to General Configuration Login*/
			answer_function = GeneralConfigAnswer;
			break;
	}
	
	createCookie('SessionId',sessionId,1);
	
	HttpRequest.open('GET','login.cgi?operation=login&session_id=' + sessionId + '&username=' + userChecked + '&password=' + passChecked + '&randomId='+randomId(), true);
	HttpRequest.onreadystatechange = answer_function;
	HttpRequest.send(null);	
	
	return false;
}

/*
 * Function resonsible to change the style of 
 * 'manager-changepass.html' for operation on SNMP.
 */ 
function handleChangeCredentialScreen()
{
	var divElement;
	var table;

	if (getActiveSessionId('SessionId') != 'no-session') {
		divElement = document.getElementById('idLoginBoxDiv');
		table = document.getElementById('idChangeCredentialsTable');

		/* Delete cell used to seperate other objects */
		table.rows[2].deleteCell(0);
		
		/* Hide elements */
		showhide('idTitleUsername','none');
		showhide('idUsername','none');
		showhide('idTitlePassword','none');
		showhide('idPassword','none');
		document.getElementById("idLoginReturnButton").innerHTML = getLangText('goBack');
		divElement.classList.remove("loginBoxWide");
		divElement.classList.add("loginSNMPBoxWide");
	}
}

function ChangeLoginAnswer()
{
	var mode;

	/* If state is equal 4 (the operation is completed) */
	if (HttpRequest.readyState == stateOperationComplete) {
		/* If the HTTP status is OK */
		if (HttpRequest.status == statusHttpOK) {
			try {
				mode = HttpRequest.responseXML.getElementsByTagName('mode')[0].firstChild.data;
								
				if(mode == "NotLoggedIn") {
					switchTo('manager-changepass.html', "IFrameManager");
				}
				else if(mode == "LoginBadCredentials") {
					showLoadingWindow(false);
					alert(getLangText('msgStatus' + mode));
				}
				else if(mode == "LoginOk"){
					alert(getLangText('credentialsChangeOk'));
					switchTo("manager.html");
				}
				else {
					switchTo('manager-changepass.html', "IFrameManager");
				}
			}
			catch(e) {
				console.log(e);
				switchTo('manager-changepass.html', "IFrameManager");
			}
		}
		/* If request status is different than 200 */
		else {
			switchTo('manager-login.html', "IFrameManager");
		}
	}
}

function ChangeLoginRequest(user, pass, newUser, newPass, confirmPass)
{
	var compl_string = "";
	var cgi_file = "";
	var operation = "";
	var md5user;
	var md5pass;
	var md5newuser;
	var md5newpass;
	var sessionId;

	/* Check user and pass */
	if(InvalidChar(user) || InvalidChar(pass)) {
		alert(getLangText('InvalidCharacters').split("#").join("\n"));
		return;
	}
	if(user.length == 0 || pass.length == 0) {
		alert(getLangText('blankCredentials'));
		return
	}

	if(newPass != confirmPass) {
		alert(getLangText('passwordMismatch'));
		return;
	}
	else if(newUser.length == 0 || newPass.length == 0 || confirmPass.length == 0) {
		alert(getLangText('blankCredentials'));
		return
	}
	else if(newUser.length > 30 || newPass.length > 30) {
		alert(getLangText('highleghtCredentials'));
		return
	}
	
	/* Test invalid characters */
	if(InvalidChar(newUser) || InvalidChar(newPass))
	{
		alert(getLangText('InvalidCharacters').split("#").join("\n"));
		return;
	}
	
	showLoadingWindow(true);
	
	/* TODO - eliminate bad chars: & = [space] */
	md5user = hex_md5('USR'+user);
	md5pass = hex_md5('PWD'+pass);
	md5newuser = hex_md5('USR'+newUser);
	md5newpass = hex_md5('PWD'+newPass);
	sessionId = readCookie("SessionId");
	
	if(sessionId == null) {
		sessionId = randomId();
		createCookie("SessionId", sessionId, 1);
		
		cgi_file = "login.cgi";
		operation = "change_login";
		
		HttpRequest.open('GET', cgi_file + '?operation=' + operation + '&session_id=' + sessionId + 
				'&username=' + md5user + '&password=' + md5pass + '&new_username=' + md5newuser + 
				'&new_password=' + md5newpass + '&randomId='+randomId(), true);
	}
	else if("SNMPOnManager" == readCookie("SelectedOnManager")) {
		if (newPass.length < 8) {
			alert(getLangText('lowleghtCredentials'));
			showLoadingWindow(false);
			return
		}
		compl_string = '&username_string=' + user + '&password_string=' + pass + '&new_username_string=' + newUser + '&new_password_string=' + newPass;
		cgi_file = "snmp.cgi";
		operation = "change_snmp_credential";
		
		HttpRequest.open('GET', cgi_file + '?operation=' + operation + '&session_id=' + sessionId + 
			compl_string + '&randomId='+randomId(), true);
	}
	/* Make sure a request was opened */
	if(HttpRequest.readyState == 1) {
		HttpRequest.onreadystatechange = ChangeLoginAnswer;
		HttpRequest.send(null);
	}
}

function VerifyOtherLoggedUser()
{
	SessionId = getActiveSessionId("SessionId");
	
	if(SessionId == 'no-session') {
		SessionId = randomId();
		createCookie("SessionId", SessionId, 1);
	}
	HttpRequest.open('GET','login.cgi?operation=get_status&session_id=' + SessionId + '&randomId='+randomId(), true);
	HttpRequest.onreadystatechange = GeneralConfigAnswer;
	HttpRequest.send(null);		
}

function ChangeMenuListElements(ListID)
{
	/* Turn the text of the selected tab bold */
	var tableElements = document.getElementById("idUlElementManagerTabs");
	let BckGrndColor = "";

	if(Vendor == "Altus"){
		BckGrndColor = hexColors.Smalt;
	}
	else if(Vendor == "Beijer"){
		BckGrndColor = hexColors.Cardinal;
	}
	else if(Vendor == "HighValue"){
		BckGrndColor = hexColors.Chambray;
	}
	if(tableElements == null){
		tableElements = window.top.frames.contentIFrameName.document.getElementById('idUlElementManagerTabs');
	}

	for(let Item = 0; Item < tableElements.children.length; Item++){
		/* Set 'onclick' attribute for elements of the management menu */
		let ElementName = tableElements.children[Item].id.split('idList');
		tableElements.children[Item].setAttribute("onclick", "switchToManagerTab('" + ElementName[1] + "OnManager');");
		FeatureId = tableElements.children[Item].id.split("List")[1];
		
		/* Change selected item styles and image */
		if(tableElements.children[Item].id == ListID){
			tableElements.children[Item].children[0].classList.remove("IconDisableAppearance");
			tableElements.children[Item].children[0].classList.remove("IconNotSelectedAppearance");
			tableElements.children[Item].children[1].style.color = hexColors.White;
			tableElements.children[Item].style.backgroundColor = BckGrndColor;
		}
		else{
			tableElements.children[Item].children[0].classList.add("IconNotSelectedAppearance");
			tableElements.children[Item].children[1].style.color = hexColors.BrightGrey;
			tableElements.children[Item].style.backgroundColor = hexColors.White;
		}
	}
}

function switchToManagerTab(ManagerCookie)
{
	var SessionId = "no-session";
	var AnswerFunction = "";
	
	createCookie('SelectedOnManager', ManagerCookie);
	
	showLoadingWindow(true);
	
	switch(ManagerCookie){
		case 'NetConfOnManager':
			AnswerFunction = NetConfAnswer;
			break;
		case 'SNMPOnManager':
			AnswerFunction = SNMPAnswer;
			break;
		case 'RemoteOnManager':
			AnswerFunction = RemoteAnswer;
			break;
		case 'USBDevicesOnManager':
			AnswerFunction = USBDevicesAnswer;
			break;
		case 'FirewallOnManager':
			AnswerFunction = FirewallAnswer;
			break;
		case 'VPNOnManager':
			AnswerFunction = VPNAnswer;
			break;
		case 'FTPOnManager':
			AnswerFunction = FTPAnswer;
			break;
		case 'LoraOnManager':
			AnswerFunction = LoraconfigAnswer;
			break;
		case 'GeneralConfigOnManager':
		default :
			AnswerFunction = GeneralConfigAnswer;
			break;
	}

	if(sessionStorage.getItem("UserLogged") == null) {
		eraseCookie("SessionId");
		SessionId = 'no-session'
	}
	else {
		SessionId = getActiveSessionId("SessionId");
	}
	
	if(SessionId == 'no-session') {
		SessionId = randomId();
		createCookie("SessionId", SessionId, 1);
	}
	HttpRequest.open('GET','login.cgi?operation=get_status&session_id=' + SessionId + '&randomId='+randomId(), true);
	HttpRequest.onreadystatechange = AnswerFunction;
	HttpRequest.send(null);		
}

/*
 * General Configuration Functions
 */
function GeneralConfigAnswer()
{
	getPageAnswer('idListGeneralConfig', 'fwupdate.cgi');
}

/*
 * Network Configurations Functions
 */
function NetConfAnswer()
{
	getPageAnswer('idListNetConf', 'netconf.cgi');
}

/*
 * SNMP Functions
 */
function SNMPAnswer()
{
	getPageAnswer('idListSNMP', 'snmp.cgi');
}

/*
 *  Operation Mode Functions
 */
function RemoteAnswer()
{
	getPageAnswer('idListRemote', 'remote.cgi');
}

/*
 * USB Devices Functions
 */ 
function USBDevicesAnswer()
{
	getPageAnswer('idListUSBDevices', 'usb_devices.cgi');
}

/*
 * Firewall Functions
 */ 
function FirewallAnswer()
{
	getPageAnswer('idListFirewall', 'firewall.cgi');
}

/*
 * OpenVPN Functions
 */ 
function VPNAnswer()
{
	getPageAnswer('idListVPN', 'vpn.cgi');
}

/*
 * FTP Functions
 */ 
function FTPAnswer()
{
	getPageAnswer('idListFTP', 'ftp.cgi');
}

/*
 * LoRa config Functions
 */
function LoraconfigAnswer()
{
	getPageAnswer('idListLora', 'loraconfig.cgi');
}

/*
 * This function load a new site in the iFrame
 */
function switchToNextView(URL){
	parent.document.getElementById(siFrameName).src = URL;
}

/*
 * This function switches to the next view
 */
function switchToNextViewDropDown(dropdownID)
{
	var sURL;
	var selectedValue;

	selectedValue = document.getElementById(dropdownID).options[document.getElementById(dropdownID).selectedIndex].value;

	sURL = selectedValue;

	parent.document.getElementById(siFrameName).src = sURL;
}

function showRedundancyTab(show)
{
	if (!top.document.getElementById("tabCell4"))
		return;
		
	if(show == "yes"){
		top.document.getElementById("tabCell4Clicked").style.display = "none";
		top.document.getElementById("tabCell4").style.display = "block";
	}
	else{
		top.document.getElementById("tabCell4Clicked").style.display = "none";
		top.document.getElementById("tabCell4").style.display = "none";
	}
}

function tabChange(elementID)
{	
	var elementNormal;
	var elementClicked;

	if (elementID > tabLimit) {
		tabLimit = elementID;
	}

	for (var i = 1; i <= tabLimit; i++) {

		elementClicked = top.document.getElementById("tabCell" + i.toString() + "Clicked").style.display;
		elementNormal = top.document.getElementById("tabCell" + i.toString()).style.display;

		/* Deselects other tabs that are being shown */
		if ((elementNormal == "block" || elementClicked == "block") && i != elementID) {

			top.document.getElementById("tabCell" + i.toString() + "Clicked").style.display = "none";
			top.document.getElementById("tabCell" + i.toString()).style.display = "block";
		}
	}

	if(elementID === '1') {
		top.document.getElementById("idrefreshPageContainer").style.display = "flex";
		top.document.getElementById("idrefreshPageDiv").setAttribute("onclick", "switchTo('NextoDiag.cgi?info=overview')");
		showhide("idRefreshText","block");
		showhide("idRefreshDateText","block");
		showhide("idrefreshPageDiv","block");
		showhide("idLogoutDiv","none");
	}
	else if(elementID === '2') {
		top.document.getElementById("idrefreshPageContainer").style.display = "flex";
		top.document.getElementById("idrefreshPageDiv").setAttribute("onclick", "switchTo('bus_information.html')");
		showhide("idRefreshText","block");
		showhide("idRefreshDateText","block");
		showhide("idrefreshPageDiv","block");
		showhide("idLogoutDiv","none");
	}
	else if(elementID === '3') {
		top.document.getElementById("idrefreshPageContainer").style.display = "flex";
		showhide("idRefreshText","none");
		showhide("idRefreshDateText","none");
		showhide("idrefreshPageDiv","none");
	}
	else if(elementID === '4') {
		top.document.getElementById("idrefreshPageContainer").style.display = "flex";
		top.document.getElementById("idrefreshPageDiv").setAttribute("onclick", "switchTo('NextoDiag.cgi?info=redundancy-status');");
		showhide("idRefreshText","block");
		showhide("idRefreshDateText","block");
		showhide("idrefreshPageDiv","block");
		showhide("idLogoutDiv","none");
	}
	else {
		top.document.getElementById("idrefreshPageContainer").style.display = "none";
	}

	/* Select the requested tab */
	top.document.getElementById("tabCell" + elementID.toString()).style.display = "none";
	top.document.getElementById("tabCell" + elementID.toString() + "Clicked").style.display = "block";
}

function LogoutFromManagement()
{
	if(confirm(getLangText("msgConfirmLogout")) == false) {
		return false;
	}
	SendLogoutRequest();
}

function SendLogoutRequest()
{
	stopVarTabPolling();

	request.open('GET','login.cgi?session_id=' + getActiveSessionId('SessionId') + 
			'&operation=logout&id=' + randomId(), true);
	request.onreadystatechange = logoutRequestHandler;
	request.send(null);
}

function logoutRequestHandler()
{
	if (request.readyState == stateOperationComplete) {
		if (request.status == statusHttpOK) {

			let mode = request.responseXML.getElementsByTagName('mode')[0].firstChild.data;

			if(mode === "LogoutOk") {
				sessionStorage.removeItem("UserLogged");

				eraseCookie("SessionId");

				top.document.getElementById("idLogoutDiv").style.display = "none";

				switchTo("manager.html");
			}
			else {
				alert(getLangText("msgLogoutCommandFail"));
				polling_start();
			}
		}  
		else{
			alert(getLangText("msgLogoutCommandFail"));
			polling_start();
		}  
	} 
}

function tabChangeDiagStatus(elementID)
{
	document.getElementById("tabCellDiag").className = "tabCell2ndPlane";
	document.getElementById("tabCellStatus").className = "tabCell2ndPlane";
	document.getElementById(elementID).className = "tabCellSelected";
}

function autoUpdateVarTab()
{	
	enablePolling = true;
	startVarTabPolling();
}

function switchToNextView(URL)
{
	parent.document.getElementById(siFrameName).src = URL;
}

function showListOrRack(index)
{
	var selectedView = readCookie("selectedView");
	
	if(index == -1 && selectedView != null) {
		index = selectedView;
	}
	else if(index !=-1){ 
		createCookie("selectedView", index, 360);
	}		     
	else{
		index = 1;
		createCookie("selectedView", index, 360);
	}
	
	document.getElementById('idViewType').selectedIndex = index;
	
	return true;		
}

function getKey(e)
{
	if(window.event) {
		return e.keyCode;
	}
	
	return e.which;
}

function highlight(obj)
{
	obj.style.top = '12px';
}

function deHighlight(obj)
{
	obj.style.top = '0px';
}

/*
 * Show loading window
 */
function showLoadingWindow(show)
{
	var state;
	var loading;
	var layer_ref;
	
	try {		
		layer_ref = 'idLoadingBox';

		if(show) {
			state = "block";
		}
		else {
			state = "none";
		}

		/* This ugly code show up the "loading bar" */
		/* IS IE 4 or 5 (or 6 beta) */
		if (document.all) { 
			eval( "document.all." + layer_ref + ".style.display = state");
		} 
		/* IS NETSCAPE 4 or below */ 
		else if (document.layers) { 
			loading = document.getElementById('idLoadingBox');
		
			if(loading != null) {
				loading.style.display = state;
			}
			else if(window.top.frames.contentIFrameName.document.getElementById('idLoadingBox') != null) {

				loading = window.top.frames.contentIFrameName.document.getElementById('idLoadingBox');

				if(loading != null) {
					loading.style.display = state;
				}		
			}
			else {
				document.layers[layer_ref].display = state; 
			}
		} 
		else if (document.getElementById &&!document.all) { 

			loading = document.getElementById(layer_ref);

			if(loading != null) {
				loading.style.display = state; 
			}
			else if(window.top.frames.contentIFrameName.document.getElementById('idLoadingBox') != null) {

				loading = window.top.frames.contentIFrameName.document.getElementById('idLoadingBox');

				if(loading != null) {
					loading.style.display = state;
				}
			}
		} 	
	} catch(e){ };	
}

/*
 * Switches to an URL in the main iFrame (if it exists), showing the Loading window.
 */
function switchTo(URL, IFrame)
{
	var seq = randomId();
	var toFind = new RegExp("[?]");
	var randomIdURL;
	var frameObj = window.top.document.getElementById(siFrameName);
	
	showLoadingWindow(true);
	
	if(toFind.test(URL) == true) {
		randomIdURL = URL + "&randomId=" + seq;
	}
	else {
		randomIdURL = URL + "?randomId=" + seq;
	}
	
	/* Add language */
	randomIdURL += "&language=" + gLanguage;
	
	if (IFrame != null) {
		
		if(IFrame == "IFrameManager") {
			frameObj = window.top.contentIFrameName.document.getElementById('contentIFrameManagerId');
		}
		else if (IFrame == "IFrameMain") {
			frameObj = window.top.document.getElementById(siFrameName);
		}
	}	
	
	if(frameObj != null) {
		frameObj.src = randomIdURL;
	}
	else {
		window.self.location.href = randomIdURL;
	}
	
	return;
}

/* 
 * Function to change round the corners of the last row in the General Overview table 
 */
function ChangeOverviewTableLastRowStyle()
{
	OverviewTable = document.getElementById("idGeneralOverviewTable");
	
	if(OverviewTable == null) {
		return
	}

	OverviewTableBody = OverviewTable.children[0];
	OverviewTableLenght = OverviewTableBody.children.length;

	OverviewTableLastRow = OverviewTableBody.children[OverviewTableLenght - 1];

	OverviewTableLastRow.children[0].style.borderBottomLeftRadius="9px";
	OverviewTableLastRow.children[1].style.borderBottomRightRadius="9px";
}

/*
 * Append an element 'li' for the given 'ul' element
 * with the given name
 */
function CreateliElement(ElementUlId, NewliIdentifier)
{
	var Elementli = document.createElement("li");
	
	Elementli.setAttribute("id", "idList"+NewliIdentifier);
	Elementli.setAttribute("style", "display: block");

	/* Set grey background color and text */
	Elementli.innerHTML ="<img src='/img/" + NewliIdentifier + "Icon.png' class='IconDisableAppearance'/> <a>" + getLangText("msgTitle" + NewliIdentifier); + "</a>";
	ElementUlId.appendChild(Elementli);
}

/*
 * Create the menu list for the Management tab
 */
function CreateManagerMenu()
{
	let ElementUl = document.getElementById("idUlElementManagerTabs");
		
	/* Create all needed elements for the manager menu list */
	if(enableNetConf == "y") {
		CreateliElement(ElementUl, "NetConf");
	}
	if(enableSNMP == "y") {
		CreateliElement(ElementUl, "SNMP");
	}
	if(enableRemoteSlave == "y") {
		CreateliElement(ElementUl, "Remote");
	}
	if(enableUSBDevices == "y") {
		CreateliElement(ElementUl, "USBDevices");
	}
	if(enableFirewall == "y") {
		CreateliElement(ElementUl, "Firewall");
	}
	if(enableVPN == "y") {
		CreateliElement(ElementUl, "VPN");
	}
	if(enableFTP == "y") {
		CreateliElement(ElementUl, "FTP");
	}
	if(enableLora == "y") {
		CreateliElement(ElementUl, "Lora");
	}
}

function DisableManagerMenu()
{
	var ElementUl = document.getElementById("idUlElementManagerTabs");

	if(!ElementUl) {
		ElementUl = window.top.contentIFrameName.document.getElementById("idUlElementManagerTabs");
		ElementUl.style.pointerEvents = "none";
	}

	for(let Elementli = 0; Elementli < ElementUl.children.length; Elementli++){
		ElementUl.children[Elementli].removeAttribute("onclick");
		ElementUl.children[Elementli].style.backgroundColor = hexColors.Mischka;
		CurrentIconName = ElementUl.children[Elementli].children[0].src; 
		ElementUl.children[Elementli].children[0].src = CurrentIconName.replace("ON", "OFF");
		ElementUl.children[Elementli].children[1].style.color = hexColors.GreyChateau;
	}
}

function disablePointerEvents(protectionId)
{	
	if (protectionId != 1) {

	EnableDisableButtonWithIcon("idBtnStartDiv", true, null);

	document.getElementById("idBtnStartDiv").style.pointerEvents = "none";
	document.getElementById("idTxtSelectFile").style.pointerEvents = "none";

	document.getElementById("upload_file").addEventListener("click", (event) => {
		event.preventDefault();
	});

	document.getElementById("idTxtSelectFile").style.display = "none";
	document.getElementById("upload_file").style.display = "none";
	
	}
	
	top.EnableDisableButtonWithIcon("idLogoutDiv", true, null);
	top.document.getElementById("idLogoutDiv").style.pointerEvents = "none";
	
	for (let i = 1; i <= 5; i++) {
		top.document.getElementById(`tabCell${i}`).style.pointerEvents = "none";
		top.document.getElementById(`tabCell${i}Clicked`).style.pointerEvents = "none";
	}
	  
	top.document.getElementById("idLanguageENText").style.pointerEvents = "none";
	top.document.getElementById("idLanguagePTText").style.pointerEvents = "none";
}

function switchToManager()
{
	var SelectedOnManager = readCookie('SelectedOnManager');

	CreateManagerMenu();
	
	if (SelectedOnManager == null) {
		SelectedOnManager = 'GeneralConfigOnManager';
	}

	if (userLogged) {
		ChangeMenuListElements();
	}

	switchToManagerTab(SelectedOnManager);
}

function showHidePassword(ObjPassId, ObjEye)
{
	Obj = document.getElementById(ObjPassId);

	if(Obj.type === "password") {
		Obj.type = "text";
		ObjEye.setAttribute('src', "/img/SlashedEyeIcon.png")
	}
	else {
		Obj.type = "password";
		ObjEye.setAttribute('src', "/img/EyeIcon.png")
	}
}

function EnableDisableButtonWithIcon(divGroupId, enable, clickCallback)
{
	ObjDiv = document.getElementById(divGroupId);
	ObjImg = ObjDiv.querySelector('img');
	ObjButton = ObjDiv.querySelector('input');

	ObjButton.disabled = enable

	if(!enable) {
		ObjDiv.classList.remove("ButtonWithIconDisable");
		ObjDiv.classList.add("ButtonWithIconEnable");

		if(clickCallback != undefined) {
			ObjImg.setAttribute("onclick",clickCallback);
			ObjButton.setAttribute("onclick",clickCallback);
		}
	}
	else {
		ObjDiv.classList.remove("ButtonWithIconEnable");
		ObjDiv.classList.add("ButtonWithIconDisable");
		ObjImg.removeAttribute("onclick");
	}
}

function SetLoadedFileNameOnLabel(FilePath, LabelId)
{
	var FileName = FilePath.replace(fakePath, "");
	var count = 0;
	var element = document.getElementById(LabelId);
	var max_width = parseFloat(element.style.maxWidth.split('px')[0]);
	var text = FileName;

	if(FileName == "") {
		document.getElementById(LabelId).title = "";
		document.getElementById(LabelId).textContent = getLangMessage("msgFileSelected");
		return 0
	}

	/* Adjust string to the field */
	while(MeasureText(text, 16) > max_width){
		count++;
		text = FileName.slice(0, FileName.length-count)+"...";
	}
	element.title = FileName;
	element.textContent = text;
}

function handleKeyPressOnLogin()
{
	var idLoginUsername = document.getElementById('idUsername').value;
	var idLoginPassword = document.getElementById('idPassword').value;

	if(getKey(event) == enterKeyCode && ManagerLogin(idLoginUsername,idLoginPassword)) {
		document.getElementById('idFwupdateLoginForm').submit();
	}
}

function randomId() 
{
	var rnum;
	var futdate;
	var expdate;
	var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
	var string_length = 8;
	var randomstring = '';
	
	for (var i=0; i<string_length; i++) {
		rnum = Math.floor(Math.random() * chars.length);
		randomstring += chars.substring(rnum,rnum+1);
	}
	
	futdate = new Date()
	expdate = futdate.getTime()

	return randomstring + expdate;
}

function createRefreshText()
{
	var now;
	var nowUTC;
	
	objText = top.document.getElementById('idRefreshText');
	
	now = new Date();
	nowUTC = now.toISOString().replace("T", " ").slice(0, -5);
		
	objText.textContent = getLangText('updateTxtPart1');
	top.document.getElementById("idRefreshDateText").textContent = nowUTC + " (UTC)";
}

/*
 * calculates the top of main container.
 * This will put it in the middle of browser's screen
 */
function calculateContainerTop()
{
	 var obj = document.getElementById('idMainContainer');
	 var viewportwidth;
	 var viewportheight;
	 var newMargin;
	 
	 if(obj == null) {
	 	return;
	 }
	 
	 /* The more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight */
	 if (typeof window.innerWidth != 'undefined')
	 {
		  viewportwidth = window.innerWidth,
		  viewportheight = window.innerHeight
	 }
	 
	/* IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document) */
	 else if (typeof document.documentElement != 'undefined'
		 && typeof document.documentElement.clientWidth !=
		 'undefined' && document.documentElement.clientWidth != 0)
	 {
		   viewportwidth = document.documentElement.clientWidth,
		   viewportheight = document.documentElement.clientHeight
	 }
	 
	 /* Older versions of IE */
	 else
	 {
		   viewportwidth = document.getElementsByTagName('body')[0].clientWidth,
		   viewportheight = document.getElementsByTagName('body')[0].clientHeight
	 }
	 
	newMargin = ((viewportheight - centeringFill) / 2);

	if(newMargin < 0)
		newMargin = 0;
	obj.style.marginTop = newMargin.toString() + "px";

}

function relocateSlot(objId, slotPosition)
{
	var newPos; 

	obj = document.getElementById(objId);

	if(obj != null) {
		newPos = slotPosition * moduleSize;
		obj.style.left = newPos + "px";
	}
}

function relocateSlotNexto(objId, slotPosition)
{
	var newPos; 

	obj = document.getElementById(objId);

	if(obj != null) {
		newPos = slotPosition * 39; 
		obj.style.left = newPos + "px";
	}
}

/*
 * Cookies support
 */
function createCookie(name,value,days) 
{
	var date;
	var expires = "";

	if (days) {
		date = new Date();
		date.setTime(date.getTime()+(days*24*60*60*1000));
		expires = "; expires="+date.toGMTString();
	}
	
	document.cookie = name+"="+value+expires+"; path=/"+";"+" samesite=strict;";
}

function readCookie(name) 
{
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	var c;

	for(var i=0; i < ca.length; i++) {
		c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
	}

	return null;
}

function eraseCookie(name) 
{
	createCookie(name,"",-1);
}

/*
 * Multi languages support
 */
function forceLanguage(id) 
{
	eraseCookie("selectedLanguage");
	createCookie("selectedLanguage", id, 360);
	window.top.location.href = "?reload=" + randomId();
}

function loadLanguage(createRandomId, forcedLanguage)
{	
	var obj;
	var userLang;
	var selectedLanguage;
	var languageRequest;
	var langURL;
	
	if(forcedLanguage == null) {
		selectedLanguage = readCookie("selectedLanguage");
	}
	else {
		selectedLanguage = forcedLanguage;
	}
	
	/* If no language is selected, then guess it */
	if(selectedLanguage == null) {
		
		userLang = (navigator.language) ? navigator.language : navigator.userLanguage; 
		
		if(userLang == null || userLang == undefined) {
			/* Fall back to english */
			selectedLanguage = "en";
		}
		else if(userLang.match("en") != null) {
			selectedLanguage = "en";
		}
		else if(userLang.match("pt") != null) {
			selectedLanguage = "pt";
		}
		else {
			/* Fall back to english when the language is not supported. */
			selectedLanguage = "en";
		}
		
		createCookie("selectedLanguage", selectedLanguage, 360);
	}
	
	languageRequest = initXMLHttpClient();
	langURL = 'language-' + selectedLanguage + '.xml';
	langURL += '?randomId=' + randomId();
	languageRequest.open('GET', langURL, false);
	languageRequest.send(null);
	languageXML = languageRequest.responseXML;
	
	try {
		for(var i = 0; i < objsToComplete.length; i++) {
			obj = document.getElementById(objsToComplete[i]['objId']);

			if(obj != null) {
				obj.innerHTML = getLangText(objsToComplete[i]['txtId']);
			}
		}
	} catch (e) { alert('loadLanguage: ' + e) }
	
	try {
		for(var i = 0; i < objsToChangeTitle.length; i++) {
			obj = document.getElementById(objsToChangeTitle[i]['objId']);

			if(obj != null) {
				obj.title = getLangText(objsToChangeTitle[i]['txtId']);
			}
		}
	} catch (e) { alert('loadLanguage: ' + e) }
	
	gLanguage = selectedLanguage;
}

function getLangText(txtId)
{
	var tagName;

	try {
		tagName = languageXML.getElementsByTagName(txtId)[0];
		if(tagName != null) {
			return tagName.childNodes[0].nodeValue;
		}
	}
	catch(e) {
		//alert(e + ': ' + txtId);
	}
}

function writeLangText(id)
{
	objId = "id" + id;
	writeLangTextId(id, objId);
}

function writeLangTextId(txtId, objId)
{
	var params = new Array(2);

	params['txtId'] = txtId;
	params['objId'] = objId;
	
	objsToComplete.push(params);
}

function writeVendorTextSwProgramming(txtId, objId)
{
	if(Vendor == "Beijer"){
		writeLangTextId('appBcsProgrammingVersion', objId);
	} else {
		writeLangTextId(txtId, objId);
	}
}

function RoundTableCorners(ObjTable)
{
	tableLength = ObjTable.rows.length;

	ObjTable.rows[0].cells[0].style.borderTopLeftRadius="3px"
	ObjTable.rows[0].cells[1].style.borderTopRightRadius="3px"

	ObjTable.rows[tableLength - 1].cells[0].style.borderBottomLeftRadius="3px"
	ObjTable.rows[tableLength - 1].cells[1].style.borderBottomRightRadius="3px"
}

/*
 * Function to load objects from another window, useful when load another page into an iframe
 */
function LoadObjFromTopWindow(ObjId)
{
	return window.top.frames.contentIFrameName.document.getElementById(ObjId)
}

function showhide(layer_ref, state) 
{
	/* IS IE 4 or 5 (or 6 beta) */
	if (document.all) { 
		eval( "document.all." + layer_ref + ".style.display = state"); 
	} 
	/* IS NETSCAPE 4 or below */
	if (document.layers) {  
		document.layers[layer_ref].display = state; 
	} 

	try {
		if (document.getElementById &&!document.all) { 
			hza = document.getElementById(layer_ref);
			if(hza === null) { hza = window.top.frames.contentIFrameName.document.getElementById(layer_ref); }
			hza.style.display = state;
		}
	}
	catch(err) {}
}

/*
 * Get the width of a string (average)
 */
function MeasureText(str, fontSize = 10) 
{
	const widths = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0.2796875,0.2765625,0.3546875,0.5546875,0.5546875,0.8890625,0.665625,0.190625,0.3328125,
	  0.3328125,0.3890625,0.5828125,0.2765625,0.3328125,0.2765625,0.3015625,0.5546875,0.5546875,
	  0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.5546875,0.2765625,
	  0.2765625,0.584375,0.5828125,0.584375,0.5546875,1.0140625,0.665625,0.665625,0.721875,0.721875,
	  0.665625,0.609375,0.7765625,0.721875,0.2765625,0.5,0.665625,0.5546875,0.8328125,0.721875,
	  0.7765625,0.665625,0.7765625,0.721875,0.665625,0.609375,0.721875,0.665625,0.94375,0.665625,
	  0.665625,0.609375,0.2765625,0.3546875,0.2765625,0.4765625,0.5546875,0.3328125,0.5546875,0.5546875,
	  0.5,0.5546875,0.5546875,0.2765625,0.5546875,0.5546875,0.221875,0.240625,0.5,0.221875,0.8328125,
	  0.5546875,0.5546875,0.5546875,0.5546875,0.3328125,0.5,0.2765625,0.5546875,0.5,0.721875,0.5,0.5,
	  0.5,0.3546875,0.259375,0.353125,0.5890625];
	const avg = 0.5279276315789471

	return str
	  .split('')
	  .map(c => c.charCodeAt(0) < widths.length ? widths[c.charCodeAt(0)] : avg)
	  .reduce((cur, acc) => acc + cur) * fontSize
}

//// Function to measure the width of a given text string based on character widths and font size
//function measureTextWidth(str, fontSize = 10) {
//	// String representing characters and their corresponding widths
//	const charWidths = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþ";
//   
//	// Average width for characters not found in the charWidths string
//	const avgWidth = 0.5279276315789471;
//   
//	// Function to get the width of a specific character
//	const getWidth = (char) => {
//	  // Find the index of the character in charWidths string
//	  const charIndex = charWidths.indexOf(char);
//	  // If found, return the normalized width (value between 0 and 1)
//	  // If not found, use the average width
//	  return charIndex !== -1 ? charIndex % 64 / 64 : avgWidth;
//	};
//   
//	// Calculate the total width of the text string
//	const totalWidth = Array.from(str).reduce((acc, char) => acc + getWidth(char), 0);
//   
//	// Multiply the total width by the font size to get the final result
//	return totalWidth * fontSize;
//}

function InvalidChar (chkfile) 
{
	var iChars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$*_.";

	for (var i = 0; i < chkfile.length; i++) {
		if (iChars.indexOf(chkfile.charAt(i)) == -1) {
			return true
		}
	}
	return false;
}

function writeTitleLangTextId(txtId, objId)
{
	var params = new Array(2);

	params['txtId'] = txtId;
	params['objId'] = objId;
	
	objsToChangeTitle.push(params);
}

function SaveObjValueByIdOnLocalStorage(objId)
{
	let subString=objId.slice(2);
	var Value = localStorage.getItem(subString);
	var numberOfPacketsInput = document.getElementById(objId);			

	if (Value !== null) {
		numberOfPacketsInput.value = Value;
	}							
	numberOfPacketsInput.addEventListener("input", function () {
		localStorage.setItem(subString, this.value);								
	});
}

/*
 * Http client  for XML
 * create an XMLHttpClient in a cross-browser manner  
 */
function initXMLHttpClient(){  
	var xmlhttp; 

	/* Mozilla/Safari/IE7 (normal browsers) */ 
	try {xmlhttp=new XMLHttpRequest()}
	/* IE (?!) */
	catch(e){ 
		var success=false;  
		var XMLHTTP_IDS=new Array('MSXML2.XMLHTTP.5.0','MSXML2.XMLHTTP.4.0',  
                              'MSXML2.XMLHTTP.3.0','MSXML2.XMLHTTP','Microsoft.XMLHTTP');  
		
		for (var i=0; i<XMLHTTP_IDS.length && !success; i++)  
      		try {success=true; xmlhttp=new ActiveXObject(XMLHTTP_IDS[i])} catch(e){}  
		if (!success) throw new Error('Unable to create XMLHttpRequest!');  
	}  

	return xmlhttp;  
} 

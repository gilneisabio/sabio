/*
  SortTable
  version 2
  7th April 2007
  Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/
  
  Instructions:
  Download this file
  Add <script src="js/sorttable.js"></script> to your HTML
  Add class="sortable" to any table you'd like to make sortable
  Click on the headers to sort
  
  Thanks to many, many people for contributions and suggestions.
  Licenced as X11: http://www.kryogenix.org/code/browser/licence.html
  This basically means: do what you want with it.
*/

 
var stIsIE = /*@cc_on!@*/false;

sorttable = {
  init: function() 
  {
    // quit if this function has already been called
    if (arguments.callee.done) return;
    // flag this function so we don't do the same thing twice
    arguments.callee.done = true;
    // kill the timer
    if (_timer) clearInterval(_timer);
    
    if (!document.createElement || !document.getElementsByTagName) return;
       
    forEach(document.getElementsByTagName('table'), function(table) {
      if (table.className.search(/\bsortable\b/) != -1) {
        sorttable.makeSortable(table);
      }
    });
    
  },
  
  makeSortable: function(table) 
  {
    // Safari doesn't support table.tHead, sigh
    if (table.tHead == null) 
    {
    	if (table.getElementsByTagName('thead').length == 0) return;
    	table.tHead = table.getElementsByTagName('thead')[0];
    }
    
    // wir machen die ersten beiden Kopfzeilen sortierbar
    sorttable.makeHeadrowSortable(table, 0);
    // zweite Head zeile falls vorhanden
    if (table.tHead.rows[1]) sorttable.makeHeadrowSortable(table, 1);
  },
    
  makeHeadrowSortable: function(table, headrow) 
  {
    // work through each column and calculate its type
    headrow = table.tHead.rows[headrow].cells;
    var colspan= 0;
    for (var i=0; i<headrow.length; i++) 
    {
      // Zellenspannweite ermitteln, dies muss zum sortable_columnindex hinzu-
      // gerechnet werden, damit für die richtige Spalte sortiert wird	
      colspan += headrow[i].colSpan - 1;
      // manually override the type with a sorttable_type attribute
      if (!headrow[i].className.match(/\bsorttable_nosort\b/)) { // skip this col
        mtch = headrow[i].className.match(/\bsorttable_([a-z0-9]+)\b/);
        if (mtch) { override = mtch[1]; }
	      if (mtch && typeof sorttable["sort_"+override] == 'function') {
	        headrow[i].sorttable_sortfunction = sorttable["sort_"+override];
	      } else {
	        headrow[i].sorttable_sortfunction = sorttable.guessType(table,i+colspan);
	      }
	      // make it clickable to sort
	      headrow[i].sorttable_columnindex = i + colspan;
	      headrow[i].sorttable_tbody = table.tBodies[0];
	      // Eventhandlefunktion zum Spaltenkopf hinzufügen
	      headrow[i]["onmouseup"] = sorter;
	    }
    }
  },
  
  guessType: function(table, column) {
    // guess the type of a column based on its first non-blank row
    sortfn = sorttable.sort_alpha;
    for (var i=0; i<table.tBodies[0].rows.length; i++) {
      text = sorttable.getInnerText(table.tBodies[0].rows[i].cells[column]);
      if (text != '') {
        if (text.match(/^-?[£$¤]?[\d,.]+%?$/)) {
          return sorttable.sort_numeric;
        }else
        {
          // es war text aber keine zahl also auf jedenfall alphanumerisch sortieren
          return sorttable.sort_alpha;
        }
      }
    }
    return sortfn;
  },
  
  getInnerText: function(node) {
    // gets the text we want to use for sorting for a cell.
    // strips leading and trailing whitespace.
    // this is *not* a generic getInnerText function; it's special to sorttable.
    // for example, you can override the cell text with a customkey attribute.
    // it also gets .value for <input> fields.
    if (node == null) return '';
    
    hasInputs = (typeof node.getElementsByTagName == 'function') &&
                 node.getElementsByTagName('input').length;
                 
    if (node.getAttribute("sorttable_customkey") != null) {
      return node.getAttribute("sorttable_customkey");
    }
    else if (typeof node.textContent != 'undefined' && !hasInputs) {
      return node.textContent.replace(/^\s+|\s+$/g, '');
    }
    else if (typeof node.innerText != 'undefined' && !hasInputs) {
      // Checkboxen erkennen wir selbst und geben bei gechecktem Zustand
      // 1 zurück sonst 2
      if (node.firstChild)
      {
      	if (node.firstChild.checked != null)
      	{
	   if (node.firstChild.checked) return "1"; else return "2";
        }
      }
      return node.innerText.replace(/^\s+|\s+$/g, '');
    }
    else if (typeof node.text != 'undefined' && !hasInputs) {
      return node.text.replace(/^\s+|\s+$/g, '');
    }
    else {
      switch (node.nodeType) {
        case 3:
          if (node.nodeName.toLowerCase() == 'input') {
            return node.value.replace(/^\s+|\s+$/g, '');
          }
        case 4:
          return node.nodeValue.replace(/^\s+|\s+$/g, '');
          break;
        case 1:
        case 11:
          var innerText = '';
          for (var i = 0; i < node.childNodes.length; i++) {
            innerText += sorttable.getInnerText(node.childNodes[i]);
          }
          return innerText.replace(/^\s+|\s+$/g, '');
          break;
        default:
          return '';
      }
    }
  },
  
  /* sort functions
     each sort function takes two parameters, a and b
     you are comparing a[0] and b[0] */
     /* sort functions
     each sort function takes two parameters, a and b
     you are comparing a[0] and b[0] */
  sort_numeric: function(a,b) {
    aa = parseFloat(a[0].replace(/[^0-9.-]/g,''));
    if (isNaN(aa)) aa = 0;
    bb = parseFloat(b[0].replace(/[^0-9.-]/g,'')); 
    if (isNaN(bb)) bb = 0;
    if (a[0] == '')return 1;
    if (b[0] == '')return -11;
    return aa-bb;
  },
  /* sort functions
     each sort function takes two parameters, a and b
     you are comparing a[0] and b[0] */
  sort_numeric_reverse: function(a,b) {
    aa = parseFloat(a[0].replace(/[^0-9.-]/g,''));
    if (isNaN(aa)) aa = 0;
    bb = parseFloat(b[0].replace(/[^0-9.-]/g,'')); 
    if (isNaN(bb)) bb = 0;
    return bb-aa;
  },
  sort_alpha: function(a,b) 
  {
    if (a[0].toLowerCase()==b[0].toLowerCase()) return 0;
    if (a[0]=="") return 1;
    if (b[0]=="") return -1;
    if (a[0].toLowerCase()<b[0].toLowerCase()) return -1;
    return 1;
  },
  sort_alpha_reverse: function(a,b) 
  {
    if (a[0].toLowerCase()==b[0].toLowerCase()) return 0;
    if (a[0].toLowerCase()<b[0].toLowerCase()) return 1;
    return -1;
  }
}

function sorter(event) 
{
      	// wenn alpha_sorted_reverse im Kopf steht sortieren wir aufsteigend
  	if (this.className.search(/\bsorttable_sorted_reverse\b/) != -1) 
	{
		this.className = this.className.replace('sorttable_sorted_reverse', 'sorttable_sorted');
		if (this.sorttable_sortfunction == sorttable.sort_alpha_reverse)
		{
			this.sorttable_sortfunction = sorttable.sort_alpha;
		}else
		{
			this.sorttable_sortfunction = sorttable.sort_numeric;
		}
	}else
	{
		// wenn alpha_sorted im Kopf steht machen wir eine reverse_sorted
		if (this.className.search(/\bsorttable_sorted\b/) != -1) 
		{
			this.className = this.className.replace('sorttable_sorted', 'sorttable_sorted_reverse');
			if (this.sorttable_sortfunction == sorttable.sort_alpha)
			{
				this.sorttable_sortfunction = sorttable.sort_alpha_reverse;
			}else
			{
				this.sorttable_sortfunction = sorttable.sort_numeric_reverse;
			}
		}
	}
	
  	  
	sortfwdind = document.getElementById('sorttable_sortfwdind');
	if (sortfwdind) { sortfwdind.parentNode.removeChild(sortfwdind); }
	sortrevind = document.getElementById('sorttable_sortrevind');
	if (sortrevind) { sortrevind.parentNode.removeChild(sortrevind); }
	
	this.className += ' sorttable_sorted';
	
	// build an array to sort. This is a Schwartzian transform thing,
	// i.e., we "decorate" each row with the actual sort key,
	// sort based on the sort keys, and then put the rows back in order
	// which is a lot faster because you only do getInnerText once per row
	row_array = [];
	col = this.sorttable_columnindex;
	rows = this.sorttable_tbody.rows;
	for (var j=0; j<rows.length; j++) 
	{
		row_array[row_array.length] = [sorttable.getInnerText(rows[j].cells[col]), rows[j]];
	}
	row_array.sort(this.sorttable_sortfunction);
	
	tb = this.sorttable_tbody;
	for (var j=0; j<row_array.length; j++) 
	{
		tb.appendChild(row_array[j][1]);
	}
	
	delete row_array;
	
	// falls ein Diagramm auf der Seite upgedatet werden muss, machen wir das jetzt
	try{updateDiagram();}catch(a){}
	      
	return true;
};

function buttonSort(value) 
{
      var submitButton = document.getElementsByName("SUBMIT")[0];
      
      submitButton.value = "sort";
      submitButton.click();
      
};

/* for Safari */
if (/WebKit/i.test(navigator.userAgent)) { // sniff
    var _timer = setInterval(function() {
        if (/loaded|complete/.test(document.readyState)) {
            sorttable.init(); // call the onload handler
        }
    }, 10);
}

/* for other browsers */
window.onload = sorttable.init;

// written by Dean Edwards, 2005
// with input from Tino Zijdel, Matthias Miller, Diego Perini
// http://dean.edwards.name/weblog/2005/10/add-event/
// Dean's forEach: http://dean.edwards.name/base/forEach.js
/*
	forEach, version 1.0
	Copyright 2006, Dean Edwards
	License: http://www.opensource.org/licenses/mit-license.php
*/

// array-like enumeration
if (!Array.forEach) { // mozilla already supports this
	Array.forEach = function(array, block, context) {
		for (var i = 0; i < array.length; i++) {
			block.call(context, array[i], i, array);
		}
	};
}

// globally resolve forEach enumeration
var forEach = function(object, block, context) {
	if (object) {
		var resolve = Object; // default
		if (object instanceof Function) {
			// functions have a "length" property
			resolve = Function;
		} else if (object.forEach instanceof Function) {
			// the object implements a custom forEach method so use that
			object.forEach(block, context);
			return;
		} else if (typeof object == "string") {
			// the object is a string
			resolve = String;
		} else if (typeof object.length == "number") {
			// the object is array-like
			resolve = Array;
		}
		resolve.forEach(object, block, context);
	}
};

